/*Copyright (c) 2017-2018 auditorius.ru All Rights Reserved.
 This software is the confidential and proprietary information of auditorius.ru You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with auditorius.ru*/
package com.repo_1native_ss_prototype.fn_service_db.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.repo_1native_ss_prototype.fn_service_db.PubPaymentHistory;
import com.repo_1native_ss_prototype.fn_service_db.service.PubPaymentHistoryService;


/**
 * Controller object for domain model class PubPaymentHistory.
 * @see PubPaymentHistory
 */
@RestController("FN_Service_db.PubPaymentHistoryController")
@Api(value = "PubPaymentHistoryController", description = "Exposes APIs to work with PubPaymentHistory resource.")
@RequestMapping("/FN_Service_db/PubPaymentHistory")
public class PubPaymentHistoryController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PubPaymentHistoryController.class);

    @Autowired
	@Qualifier("FN_Service_db.PubPaymentHistoryService")
	private PubPaymentHistoryService pubPaymentHistoryService;

	@ApiOperation(value = "Creates a new PubPaymentHistory instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public PubPaymentHistory createPubPaymentHistory(@RequestBody PubPaymentHistory pubPaymentHistory) {
		LOGGER.debug("Create PubPaymentHistory with information: {}" , pubPaymentHistory);

		pubPaymentHistory = pubPaymentHistoryService.create(pubPaymentHistory);
		LOGGER.debug("Created PubPaymentHistory with information: {}" , pubPaymentHistory);

	    return pubPaymentHistory;
	}


    @ApiOperation(value = "Returns the PubPaymentHistory instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PubPaymentHistory getPubPaymentHistory(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting PubPaymentHistory with id: {}" , id);

        PubPaymentHistory foundPubPaymentHistory = pubPaymentHistoryService.getById(id);
        LOGGER.debug("PubPaymentHistory details with id: {}" , foundPubPaymentHistory);

        return foundPubPaymentHistory;
    }

    @ApiOperation(value = "Updates the PubPaymentHistory instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PubPaymentHistory editPubPaymentHistory(@PathVariable("id") Integer id, @RequestBody PubPaymentHistory pubPaymentHistory) throws EntityNotFoundException {
        LOGGER.debug("Editing PubPaymentHistory with id: {}" , pubPaymentHistory.getId());

        pubPaymentHistory.setId(id);
        pubPaymentHistory = pubPaymentHistoryService.update(pubPaymentHistory);
        LOGGER.debug("PubPaymentHistory details with id: {}" , pubPaymentHistory);

        return pubPaymentHistory;
    }

    @ApiOperation(value = "Deletes the PubPaymentHistory instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deletePubPaymentHistory(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting PubPaymentHistory with id: {}" , id);

        PubPaymentHistory deletedPubPaymentHistory = pubPaymentHistoryService.delete(id);

        return deletedPubPaymentHistory != null;
    }

    /**
     * @deprecated Use {@link #findPubPaymentHistories(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of PubPaymentHistory instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PubPaymentHistory> searchPubPaymentHistoriesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering PubPaymentHistories list");
        return pubPaymentHistoryService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of PubPaymentHistory instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PubPaymentHistory> findPubPaymentHistories(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PubPaymentHistories list");
        return pubPaymentHistoryService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of PubPaymentHistory instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PubPaymentHistory> filterPubPaymentHistories(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PubPaymentHistories list");
        return pubPaymentHistoryService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportPubPaymentHistories(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return pubPaymentHistoryService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of PubPaymentHistory instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countPubPaymentHistories( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting PubPaymentHistories");
		return pubPaymentHistoryService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getPubPaymentHistoryAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return pubPaymentHistoryService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PubPaymentHistoryService instance
	 */
	protected void setPubPaymentHistoryService(PubPaymentHistoryService service) {
		this.pubPaymentHistoryService = service;
	}

}

