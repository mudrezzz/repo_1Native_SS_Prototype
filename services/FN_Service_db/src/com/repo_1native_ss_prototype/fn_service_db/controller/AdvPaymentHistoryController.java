/*Copyright (c) 2017-2018 auditorius.ru All Rights Reserved.
 This software is the confidential and proprietary information of auditorius.ru You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with auditorius.ru*/
package com.repo_1native_ss_prototype.fn_service_db.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.repo_1native_ss_prototype.fn_service_db.AdvPaymentHistory;
import com.repo_1native_ss_prototype.fn_service_db.service.AdvPaymentHistoryService;


/**
 * Controller object for domain model class AdvPaymentHistory.
 * @see AdvPaymentHistory
 */
@RestController("FN_Service_db.AdvPaymentHistoryController")
@Api(value = "AdvPaymentHistoryController", description = "Exposes APIs to work with AdvPaymentHistory resource.")
@RequestMapping("/FN_Service_db/AdvPaymentHistory")
public class AdvPaymentHistoryController {

    private static final Logger LOGGER = LoggerFactory.getLogger(AdvPaymentHistoryController.class);

    @Autowired
	@Qualifier("FN_Service_db.AdvPaymentHistoryService")
	private AdvPaymentHistoryService advPaymentHistoryService;

	@ApiOperation(value = "Creates a new AdvPaymentHistory instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public AdvPaymentHistory createAdvPaymentHistory(@RequestBody AdvPaymentHistory advPaymentHistory) {
		LOGGER.debug("Create AdvPaymentHistory with information: {}" , advPaymentHistory);

		advPaymentHistory = advPaymentHistoryService.create(advPaymentHistory);
		LOGGER.debug("Created AdvPaymentHistory with information: {}" , advPaymentHistory);

	    return advPaymentHistory;
	}


    @ApiOperation(value = "Returns the AdvPaymentHistory instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AdvPaymentHistory getAdvPaymentHistory(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting AdvPaymentHistory with id: {}" , id);

        AdvPaymentHistory foundAdvPaymentHistory = advPaymentHistoryService.getById(id);
        LOGGER.debug("AdvPaymentHistory details with id: {}" , foundAdvPaymentHistory);

        return foundAdvPaymentHistory;
    }

    @ApiOperation(value = "Updates the AdvPaymentHistory instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AdvPaymentHistory editAdvPaymentHistory(@PathVariable("id") Integer id, @RequestBody AdvPaymentHistory advPaymentHistory) throws EntityNotFoundException {
        LOGGER.debug("Editing AdvPaymentHistory with id: {}" , advPaymentHistory.getId());

        advPaymentHistory.setId(id);
        advPaymentHistory = advPaymentHistoryService.update(advPaymentHistory);
        LOGGER.debug("AdvPaymentHistory details with id: {}" , advPaymentHistory);

        return advPaymentHistory;
    }

    @ApiOperation(value = "Deletes the AdvPaymentHistory instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteAdvPaymentHistory(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting AdvPaymentHistory with id: {}" , id);

        AdvPaymentHistory deletedAdvPaymentHistory = advPaymentHistoryService.delete(id);

        return deletedAdvPaymentHistory != null;
    }

    /**
     * @deprecated Use {@link #findAdvPaymentHistories(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of AdvPaymentHistory instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AdvPaymentHistory> searchAdvPaymentHistoriesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering AdvPaymentHistories list");
        return advPaymentHistoryService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of AdvPaymentHistory instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AdvPaymentHistory> findAdvPaymentHistories(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering AdvPaymentHistories list");
        return advPaymentHistoryService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of AdvPaymentHistory instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AdvPaymentHistory> filterAdvPaymentHistories(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering AdvPaymentHistories list");
        return advPaymentHistoryService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportAdvPaymentHistories(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return advPaymentHistoryService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of AdvPaymentHistory instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countAdvPaymentHistories( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting AdvPaymentHistories");
		return advPaymentHistoryService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getAdvPaymentHistoryAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return advPaymentHistoryService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AdvPaymentHistoryService instance
	 */
	protected void setAdvPaymentHistoryService(AdvPaymentHistoryService service) {
		this.advPaymentHistoryService = service;
	}

}

