/*Copyright (c) 2017-2018 auditorius.ru All Rights Reserved.
 This software is the confidential and proprietary information of auditorius.ru You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with auditorius.ru*/
package com.repo_1native_ss_prototype.fn_service_db.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.repo_1native_ss_prototype.fn_service_db.AdvPaymentHistory;
import com.repo_1native_ss_prototype.fn_service_db.Advertiser;
import com.repo_1native_ss_prototype.fn_service_db.Campaign;
import com.repo_1native_ss_prototype.fn_service_db.PubPaymentHistory;
import com.repo_1native_ss_prototype.fn_service_db.Publisher;
import com.repo_1native_ss_prototype.fn_service_db.Sites;
import com.repo_1native_ss_prototype.fn_service_db.Tags;
import com.repo_1native_ss_prototype.fn_service_db.Users;
import com.repo_1native_ss_prototype.fn_service_db.service.PublisherService;


/**
 * Controller object for domain model class Publisher.
 * @see Publisher
 */
@RestController("FN_Service_db.PublisherController")
@Api(value = "PublisherController", description = "Exposes APIs to work with Publisher resource.")
@RequestMapping("/FN_Service_db/Publisher")
public class PublisherController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PublisherController.class);

    @Autowired
	@Qualifier("FN_Service_db.PublisherService")
	private PublisherService publisherService;

	@ApiOperation(value = "Creates a new Publisher instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Publisher createPublisher(@RequestBody Publisher publisher) {
		LOGGER.debug("Create Publisher with information: {}" , publisher);

		publisher = publisherService.create(publisher);
		LOGGER.debug("Created Publisher with information: {}" , publisher);

	    return publisher;
	}


    @ApiOperation(value = "Returns the Publisher instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Publisher getPublisher(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Publisher with id: {}" , id);

        Publisher foundPublisher = publisherService.getById(id);
        LOGGER.debug("Publisher details with id: {}" , foundPublisher);

        return foundPublisher;
    }

    @ApiOperation(value = "Updates the Publisher instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Publisher editPublisher(@PathVariable("id") Integer id, @RequestBody Publisher publisher) throws EntityNotFoundException {
        LOGGER.debug("Editing Publisher with id: {}" , publisher.getId());

        publisher.setId(id);
        publisher = publisherService.update(publisher);
        LOGGER.debug("Publisher details with id: {}" , publisher);

        return publisher;
    }

    @ApiOperation(value = "Deletes the Publisher instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deletePublisher(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Publisher with id: {}" , id);

        Publisher deletedPublisher = publisherService.delete(id);

        return deletedPublisher != null;
    }

    /**
     * @deprecated Use {@link #findPublishers(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Publisher instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Publisher> searchPublishersByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Publishers list");
        return publisherService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Publisher instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Publisher> findPublishers(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Publishers list");
        return publisherService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Publisher instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Publisher> filterPublishers(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Publishers list");
        return publisherService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportPublishers(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return publisherService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Publisher instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countPublishers( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Publishers");
		return publisherService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getPublisherAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return publisherService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/advertisers", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the advertisers instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Advertiser> findAssociatedAdvertisers(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated advertisers");
        return publisherService.findAssociatedAdvertisers(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/advPaymentHistories", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the advPaymentHistories instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AdvPaymentHistory> findAssociatedAdvPaymentHistories(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated advPaymentHistories");
        return publisherService.findAssociatedAdvPaymentHistories(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/campaigns", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the campaigns instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Campaign> findAssociatedCampaigns(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated campaigns");
        return publisherService.findAssociatedCampaigns(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/pubPaymentHistories", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the pubPaymentHistories instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PubPaymentHistory> findAssociatedPubPaymentHistories(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated pubPaymentHistories");
        return publisherService.findAssociatedPubPaymentHistories(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/siteses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the siteses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Sites> findAssociatedSiteses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated siteses");
        return publisherService.findAssociatedSiteses(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/tagses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the tagses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Tags> findAssociatedTagses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated tagses");
        return publisherService.findAssociatedTagses(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/userses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the userses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Users> findAssociatedUserses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated userses");
        return publisherService.findAssociatedUserses(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PublisherService instance
	 */
	protected void setPublisherService(PublisherService service) {
		this.publisherService = service;
	}

}

