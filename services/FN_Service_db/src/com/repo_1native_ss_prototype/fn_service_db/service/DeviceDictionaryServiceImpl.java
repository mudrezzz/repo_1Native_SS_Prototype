/*Copyright (c) 2017-2018 auditorius.ru All Rights Reserved.
 This software is the confidential and proprietary information of auditorius.ru You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with auditorius.ru*/
package com.repo_1native_ss_prototype.fn_service_db.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.repo_1native_ss_prototype.fn_service_db.DeviceDictionary;
import com.repo_1native_ss_prototype.fn_service_db.StatsDays;


/**
 * ServiceImpl object for domain model class DeviceDictionary.
 *
 * @see DeviceDictionary
 */
@Service("FN_Service_db.DeviceDictionaryService")
public class DeviceDictionaryServiceImpl implements DeviceDictionaryService {

    private static final Logger LOGGER = LoggerFactory.getLogger(DeviceDictionaryServiceImpl.class);

    @Autowired
	@Qualifier("FN_Service_db.StatsDaysService")
	private StatsDaysService statsDaysService;

    @Autowired
    @Qualifier("FN_Service_db.DeviceDictionaryDao")
    private WMGenericDao<DeviceDictionary, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<DeviceDictionary, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "FN_Service_dbTransactionManager")
    @Override
	public DeviceDictionary create(DeviceDictionary deviceDictionary) {
        LOGGER.debug("Creating a new DeviceDictionary with information: {}", deviceDictionary);
        DeviceDictionary deviceDictionaryCreated = this.wmGenericDao.create(deviceDictionary);
        if(deviceDictionaryCreated.getStatsDayses() != null) {
            for(StatsDays statsDayse : deviceDictionaryCreated.getStatsDayses()) {
                statsDayse.setDeviceDictionary(deviceDictionaryCreated);
                LOGGER.debug("Creating a new child StatsDays with information: {}", statsDayse);
                statsDaysService.create(statsDayse);
            }
        }
        return deviceDictionaryCreated;
    }

	@Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
	@Override
	public DeviceDictionary getById(Integer devicedictionaryId) throws EntityNotFoundException {
        LOGGER.debug("Finding DeviceDictionary by id: {}", devicedictionaryId);
        DeviceDictionary deviceDictionary = this.wmGenericDao.findById(devicedictionaryId);
        if (deviceDictionary == null){
            LOGGER.debug("No DeviceDictionary found with id: {}", devicedictionaryId);
            throw new EntityNotFoundException(String.valueOf(devicedictionaryId));
        }
        return deviceDictionary;
    }

    @Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
	@Override
	public DeviceDictionary findById(Integer devicedictionaryId) {
        LOGGER.debug("Finding DeviceDictionary by id: {}", devicedictionaryId);
        return this.wmGenericDao.findById(devicedictionaryId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "FN_Service_dbTransactionManager")
	@Override
	public DeviceDictionary update(DeviceDictionary deviceDictionary) throws EntityNotFoundException {
        LOGGER.debug("Updating DeviceDictionary with information: {}", deviceDictionary);
        this.wmGenericDao.update(deviceDictionary);

        Integer devicedictionaryId = deviceDictionary.getId();

        return this.wmGenericDao.findById(devicedictionaryId);
    }

    @Transactional(value = "FN_Service_dbTransactionManager")
	@Override
	public DeviceDictionary delete(Integer devicedictionaryId) throws EntityNotFoundException {
        LOGGER.debug("Deleting DeviceDictionary with id: {}", devicedictionaryId);
        DeviceDictionary deleted = this.wmGenericDao.findById(devicedictionaryId);
        if (deleted == null) {
            LOGGER.debug("No DeviceDictionary found with id: {}", devicedictionaryId);
            throw new EntityNotFoundException(String.valueOf(devicedictionaryId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
	@Override
	public Page<DeviceDictionary> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all DeviceDictionaries");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
    @Override
    public Page<DeviceDictionary> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all DeviceDictionaries");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service FN_Service_db for table DeviceDictionary to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
    @Override
    public Page<StatsDays> findAssociatedStatsDayses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated statsDayses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("deviceDictionary.id = '" + id + "'");

        return statsDaysService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service StatsDaysService instance
	 */
	protected void setStatsDaysService(StatsDaysService service) {
        this.statsDaysService = service;
    }

}

