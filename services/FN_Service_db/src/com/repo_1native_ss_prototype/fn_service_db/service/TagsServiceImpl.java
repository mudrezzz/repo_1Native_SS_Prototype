/*Copyright (c) 2017-2018 auditorius.ru All Rights Reserved.
 This software is the confidential and proprietary information of auditorius.ru You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with auditorius.ru*/
package com.repo_1native_ss_prototype.fn_service_db.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.repo_1native_ss_prototype.fn_service_db.StatsDays;
import com.repo_1native_ss_prototype.fn_service_db.Tags;


/**
 * ServiceImpl object for domain model class Tags.
 *
 * @see Tags
 */
@Service("FN_Service_db.TagsService")
public class TagsServiceImpl implements TagsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TagsServiceImpl.class);

    @Autowired
	@Qualifier("FN_Service_db.StatsDaysService")
	private StatsDaysService statsDaysService;

    @Autowired
    @Qualifier("FN_Service_db.TagsDao")
    private WMGenericDao<Tags, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Tags, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "FN_Service_dbTransactionManager")
    @Override
	public Tags create(Tags tags) {
        LOGGER.debug("Creating a new Tags with information: {}", tags);
        Tags tagsCreated = this.wmGenericDao.create(tags);
        if(tagsCreated.getStatsDayses() != null) {
            for(StatsDays statsDayse : tagsCreated.getStatsDayses()) {
                statsDayse.setTags(tagsCreated);
                LOGGER.debug("Creating a new child StatsDays with information: {}", statsDayse);
                statsDaysService.create(statsDayse);
            }
        }
        return tagsCreated;
    }

	@Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
	@Override
	public Tags getById(Integer tagsId) throws EntityNotFoundException {
        LOGGER.debug("Finding Tags by id: {}", tagsId);
        Tags tags = this.wmGenericDao.findById(tagsId);
        if (tags == null){
            LOGGER.debug("No Tags found with id: {}", tagsId);
            throw new EntityNotFoundException(String.valueOf(tagsId));
        }
        return tags;
    }

    @Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
	@Override
	public Tags findById(Integer tagsId) {
        LOGGER.debug("Finding Tags by id: {}", tagsId);
        return this.wmGenericDao.findById(tagsId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "FN_Service_dbTransactionManager")
	@Override
	public Tags update(Tags tags) throws EntityNotFoundException {
        LOGGER.debug("Updating Tags with information: {}", tags);
        this.wmGenericDao.update(tags);

        Integer tagsId = tags.getId();

        return this.wmGenericDao.findById(tagsId);
    }

    @Transactional(value = "FN_Service_dbTransactionManager")
	@Override
	public Tags delete(Integer tagsId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Tags with id: {}", tagsId);
        Tags deleted = this.wmGenericDao.findById(tagsId);
        if (deleted == null) {
            LOGGER.debug("No Tags found with id: {}", tagsId);
            throw new EntityNotFoundException(String.valueOf(tagsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
	@Override
	public Page<Tags> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Tags");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
    @Override
    public Page<Tags> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Tags");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service FN_Service_db for table Tags to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
    @Override
    public Page<StatsDays> findAssociatedStatsDayses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated statsDayses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("tags.id = '" + id + "'");

        return statsDaysService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service StatsDaysService instance
	 */
	protected void setStatsDaysService(StatsDaysService service) {
        this.statsDaysService = service;
    }

}

