/*Copyright (c) 2017-2018 auditorius.ru All Rights Reserved.
 This software is the confidential and proprietary information of auditorius.ru You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with auditorius.ru*/
package com.repo_1native_ss_prototype.fn_service_db.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.repo_1native_ss_prototype.fn_service_db.AdvPaymentHistory;
import com.repo_1native_ss_prototype.fn_service_db.Advertiser;
import com.repo_1native_ss_prototype.fn_service_db.Campaign;
import com.repo_1native_ss_prototype.fn_service_db.PubPaymentHistory;
import com.repo_1native_ss_prototype.fn_service_db.Publisher;
import com.repo_1native_ss_prototype.fn_service_db.Sites;
import com.repo_1native_ss_prototype.fn_service_db.Tags;
import com.repo_1native_ss_prototype.fn_service_db.Users;


/**
 * ServiceImpl object for domain model class Publisher.
 *
 * @see Publisher
 */
@Service("FN_Service_db.PublisherService")
public class PublisherServiceImpl implements PublisherService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PublisherServiceImpl.class);

    @Autowired
	@Qualifier("FN_Service_db.TagsService")
	private TagsService tagsService;

    @Autowired
	@Qualifier("FN_Service_db.CampaignService")
	private CampaignService campaignService;

    @Autowired
	@Qualifier("FN_Service_db.SitesService")
	private SitesService sitesService;

    @Autowired
	@Qualifier("FN_Service_db.UsersService")
	private UsersService usersService;

    @Autowired
	@Qualifier("FN_Service_db.AdvertiserService")
	private AdvertiserService advertiserService;

    @Autowired
	@Qualifier("FN_Service_db.AdvPaymentHistoryService")
	private AdvPaymentHistoryService advPaymentHistoryService;

    @Autowired
	@Qualifier("FN_Service_db.PubPaymentHistoryService")
	private PubPaymentHistoryService pubPaymentHistoryService;

    @Autowired
    @Qualifier("FN_Service_db.PublisherDao")
    private WMGenericDao<Publisher, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Publisher, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "FN_Service_dbTransactionManager")
    @Override
	public Publisher create(Publisher publisher) {
        LOGGER.debug("Creating a new Publisher with information: {}", publisher);
        Publisher publisherCreated = this.wmGenericDao.create(publisher);
        if(publisherCreated.getAdvertisers() != null) {
            for(Advertiser advertiser : publisherCreated.getAdvertisers()) {
                advertiser.setPublisher(publisherCreated);
                LOGGER.debug("Creating a new child Advertiser with information: {}", advertiser);
                advertiserService.create(advertiser);
            }
        }

        if(publisherCreated.getAdvPaymentHistories() != null) {
            for(AdvPaymentHistory advPaymentHistorie : publisherCreated.getAdvPaymentHistories()) {
                advPaymentHistorie.setPublisher(publisherCreated);
                LOGGER.debug("Creating a new child AdvPaymentHistory with information: {}", advPaymentHistorie);
                advPaymentHistoryService.create(advPaymentHistorie);
            }
        }

        if(publisherCreated.getCampaigns() != null) {
            for(Campaign campaign : publisherCreated.getCampaigns()) {
                campaign.setPublisher(publisherCreated);
                LOGGER.debug("Creating a new child Campaign with information: {}", campaign);
                campaignService.create(campaign);
            }
        }

        if(publisherCreated.getPubPaymentHistories() != null) {
            for(PubPaymentHistory pubPaymentHistorie : publisherCreated.getPubPaymentHistories()) {
                pubPaymentHistorie.setPublisher(publisherCreated);
                LOGGER.debug("Creating a new child PubPaymentHistory with information: {}", pubPaymentHistorie);
                pubPaymentHistoryService.create(pubPaymentHistorie);
            }
        }

        if(publisherCreated.getSiteses() != null) {
            for(Sites sitese : publisherCreated.getSiteses()) {
                sitese.setPublisher(publisherCreated);
                LOGGER.debug("Creating a new child Sites with information: {}", sitese);
                sitesService.create(sitese);
            }
        }

        if(publisherCreated.getTagses() != null) {
            for(Tags tagse : publisherCreated.getTagses()) {
                tagse.setPublisher(publisherCreated);
                LOGGER.debug("Creating a new child Tags with information: {}", tagse);
                tagsService.create(tagse);
            }
        }

        if(publisherCreated.getUserses() != null) {
            for(Users userse : publisherCreated.getUserses()) {
                userse.setPublisher(publisherCreated);
                LOGGER.debug("Creating a new child Users with information: {}", userse);
                usersService.create(userse);
            }
        }
        return publisherCreated;
    }

	@Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
	@Override
	public Publisher getById(Integer publisherId) throws EntityNotFoundException {
        LOGGER.debug("Finding Publisher by id: {}", publisherId);
        Publisher publisher = this.wmGenericDao.findById(publisherId);
        if (publisher == null){
            LOGGER.debug("No Publisher found with id: {}", publisherId);
            throw new EntityNotFoundException(String.valueOf(publisherId));
        }
        return publisher;
    }

    @Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
	@Override
	public Publisher findById(Integer publisherId) {
        LOGGER.debug("Finding Publisher by id: {}", publisherId);
        return this.wmGenericDao.findById(publisherId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "FN_Service_dbTransactionManager")
	@Override
	public Publisher update(Publisher publisher) throws EntityNotFoundException {
        LOGGER.debug("Updating Publisher with information: {}", publisher);
        this.wmGenericDao.update(publisher);

        Integer publisherId = publisher.getId();

        return this.wmGenericDao.findById(publisherId);
    }

    @Transactional(value = "FN_Service_dbTransactionManager")
	@Override
	public Publisher delete(Integer publisherId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Publisher with id: {}", publisherId);
        Publisher deleted = this.wmGenericDao.findById(publisherId);
        if (deleted == null) {
            LOGGER.debug("No Publisher found with id: {}", publisherId);
            throw new EntityNotFoundException(String.valueOf(publisherId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
	@Override
	public Page<Publisher> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Publishers");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
    @Override
    public Page<Publisher> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Publishers");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service FN_Service_db for table Publisher to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
    @Override
    public Page<Advertiser> findAssociatedAdvertisers(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated advertisers");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("publisher.id = '" + id + "'");

        return advertiserService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
    @Override
    public Page<AdvPaymentHistory> findAssociatedAdvPaymentHistories(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated advPaymentHistories");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("publisher.id = '" + id + "'");

        return advPaymentHistoryService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
    @Override
    public Page<Campaign> findAssociatedCampaigns(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated campaigns");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("publisher.id = '" + id + "'");

        return campaignService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
    @Override
    public Page<PubPaymentHistory> findAssociatedPubPaymentHistories(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated pubPaymentHistories");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("publisher.id = '" + id + "'");

        return pubPaymentHistoryService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
    @Override
    public Page<Sites> findAssociatedSiteses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated siteses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("publisher.id = '" + id + "'");

        return sitesService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
    @Override
    public Page<Tags> findAssociatedTagses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated tagses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("publisher.id = '" + id + "'");

        return tagsService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
    @Override
    public Page<Users> findAssociatedUserses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated userses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("publisher.id = '" + id + "'");

        return usersService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TagsService instance
	 */
	protected void setTagsService(TagsService service) {
        this.tagsService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CampaignService instance
	 */
	protected void setCampaignService(CampaignService service) {
        this.campaignService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SitesService instance
	 */
	protected void setSitesService(SitesService service) {
        this.sitesService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service UsersService instance
	 */
	protected void setUsersService(UsersService service) {
        this.usersService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AdvertiserService instance
	 */
	protected void setAdvertiserService(AdvertiserService service) {
        this.advertiserService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AdvPaymentHistoryService instance
	 */
	protected void setAdvPaymentHistoryService(AdvPaymentHistoryService service) {
        this.advPaymentHistoryService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PubPaymentHistoryService instance
	 */
	protected void setPubPaymentHistoryService(PubPaymentHistoryService service) {
        this.pubPaymentHistoryService = service;
    }

}

