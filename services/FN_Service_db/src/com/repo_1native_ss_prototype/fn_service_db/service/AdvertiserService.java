/*Copyright (c) 2017-2018 auditorius.ru All Rights Reserved.
 This software is the confidential and proprietary information of auditorius.ru You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with auditorius.ru*/
package com.repo_1native_ss_prototype.fn_service_db.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.repo_1native_ss_prototype.fn_service_db.Advertiser;

/**
 * Service object for domain model class {@link Advertiser}.
 */
public interface AdvertiserService {

    /**
     * Creates a new Advertiser. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Advertiser if any.
     *
     * @param advertiser Details of the Advertiser to be created; value cannot be null.
     * @return The newly created Advertiser.
     */
	Advertiser create(Advertiser advertiser);


	/**
	 * Returns Advertiser by given id if exists.
	 *
	 * @param advertiserId The id of the Advertiser to get; value cannot be null.
	 * @return Advertiser associated with the given advertiserId.
     * @throws EntityNotFoundException If no Advertiser is found.
	 */
	Advertiser getById(Integer advertiserId) throws EntityNotFoundException;

    /**
	 * Find and return the Advertiser by given id if exists, returns null otherwise.
	 *
	 * @param advertiserId The id of the Advertiser to get; value cannot be null.
	 * @return Advertiser associated with the given advertiserId.
	 */
	Advertiser findById(Integer advertiserId);


	/**
	 * Updates the details of an existing Advertiser. It replaces all fields of the existing Advertiser with the given advertiser.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on Advertiser if any.
     *
	 * @param advertiser The details of the Advertiser to be updated; value cannot be null.
	 * @return The updated Advertiser.
	 * @throws EntityNotFoundException if no Advertiser is found with given input.
	 */
	Advertiser update(Advertiser advertiser) throws EntityNotFoundException;

    /**
	 * Deletes an existing Advertiser with the given id.
	 *
	 * @param advertiserId The id of the Advertiser to be deleted; value cannot be null.
	 * @return The deleted Advertiser.
	 * @throws EntityNotFoundException if no Advertiser found with the given id.
	 */
	Advertiser delete(Integer advertiserId) throws EntityNotFoundException;

	/**
	 * Find all Advertisers matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Advertisers.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<Advertiser> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all Advertisers matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Advertisers.
     *
     * @see Pageable
     * @see Page
	 */
    Page<Advertiser> findAll(String query, Pageable pageable);

    /**
	 * Exports all Advertisers matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Advertisers in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the Advertiser.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

