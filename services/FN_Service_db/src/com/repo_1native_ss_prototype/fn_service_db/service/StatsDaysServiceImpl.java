/*Copyright (c) 2017-2018 auditorius.ru All Rights Reserved.
 This software is the confidential and proprietary information of auditorius.ru You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with auditorius.ru*/
package com.repo_1native_ss_prototype.fn_service_db.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.repo_1native_ss_prototype.fn_service_db.StatsDays;


/**
 * ServiceImpl object for domain model class StatsDays.
 *
 * @see StatsDays
 */
@Service("FN_Service_db.StatsDaysService")
public class StatsDaysServiceImpl implements StatsDaysService {

    private static final Logger LOGGER = LoggerFactory.getLogger(StatsDaysServiceImpl.class);


    @Autowired
    @Qualifier("FN_Service_db.StatsDaysDao")
    private WMGenericDao<StatsDays, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<StatsDays, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "FN_Service_dbTransactionManager")
    @Override
	public StatsDays create(StatsDays statsDays) {
        LOGGER.debug("Creating a new StatsDays with information: {}", statsDays);
        StatsDays statsDaysCreated = this.wmGenericDao.create(statsDays);
        return statsDaysCreated;
    }

	@Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
	@Override
	public StatsDays getById(Integer statsdaysId) throws EntityNotFoundException {
        LOGGER.debug("Finding StatsDays by id: {}", statsdaysId);
        StatsDays statsDays = this.wmGenericDao.findById(statsdaysId);
        if (statsDays == null){
            LOGGER.debug("No StatsDays found with id: {}", statsdaysId);
            throw new EntityNotFoundException(String.valueOf(statsdaysId));
        }
        return statsDays;
    }

    @Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
	@Override
	public StatsDays findById(Integer statsdaysId) {
        LOGGER.debug("Finding StatsDays by id: {}", statsdaysId);
        return this.wmGenericDao.findById(statsdaysId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "FN_Service_dbTransactionManager")
	@Override
	public StatsDays update(StatsDays statsDays) throws EntityNotFoundException {
        LOGGER.debug("Updating StatsDays with information: {}", statsDays);
        this.wmGenericDao.update(statsDays);

        Integer statsdaysId = statsDays.getId();

        return this.wmGenericDao.findById(statsdaysId);
    }

    @Transactional(value = "FN_Service_dbTransactionManager")
	@Override
	public StatsDays delete(Integer statsdaysId) throws EntityNotFoundException {
        LOGGER.debug("Deleting StatsDays with id: {}", statsdaysId);
        StatsDays deleted = this.wmGenericDao.findById(statsdaysId);
        if (deleted == null) {
            LOGGER.debug("No StatsDays found with id: {}", statsdaysId);
            throw new EntityNotFoundException(String.valueOf(statsdaysId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
	@Override
	public Page<StatsDays> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all StatsDays");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
    @Override
    public Page<StatsDays> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all StatsDays");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service FN_Service_db for table StatsDays to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

