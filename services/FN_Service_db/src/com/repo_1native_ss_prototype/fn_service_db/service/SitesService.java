/*Copyright (c) 2017-2018 auditorius.ru All Rights Reserved.
 This software is the confidential and proprietary information of auditorius.ru You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with auditorius.ru*/
package com.repo_1native_ss_prototype.fn_service_db.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.repo_1native_ss_prototype.fn_service_db.Sites;
import com.repo_1native_ss_prototype.fn_service_db.Tags;

/**
 * Service object for domain model class {@link Sites}.
 */
public interface SitesService {

    /**
     * Creates a new Sites. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Sites if any.
     *
     * @param sites Details of the Sites to be created; value cannot be null.
     * @return The newly created Sites.
     */
	Sites create(Sites sites);


	/**
	 * Returns Sites by given id if exists.
	 *
	 * @param sitesId The id of the Sites to get; value cannot be null.
	 * @return Sites associated with the given sitesId.
     * @throws EntityNotFoundException If no Sites is found.
	 */
	Sites getById(Integer sitesId) throws EntityNotFoundException;

    /**
	 * Find and return the Sites by given id if exists, returns null otherwise.
	 *
	 * @param sitesId The id of the Sites to get; value cannot be null.
	 * @return Sites associated with the given sitesId.
	 */
	Sites findById(Integer sitesId);


	/**
	 * Updates the details of an existing Sites. It replaces all fields of the existing Sites with the given sites.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on Sites if any.
     *
	 * @param sites The details of the Sites to be updated; value cannot be null.
	 * @return The updated Sites.
	 * @throws EntityNotFoundException if no Sites is found with given input.
	 */
	Sites update(Sites sites) throws EntityNotFoundException;

    /**
	 * Deletes an existing Sites with the given id.
	 *
	 * @param sitesId The id of the Sites to be deleted; value cannot be null.
	 * @return The deleted Sites.
	 * @throws EntityNotFoundException if no Sites found with the given id.
	 */
	Sites delete(Integer sitesId) throws EntityNotFoundException;

	/**
	 * Find all Sites matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Sites.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<Sites> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all Sites matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Sites.
     *
     * @see Pageable
     * @see Page
	 */
    Page<Sites> findAll(String query, Pageable pageable);

    /**
	 * Exports all Sites matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Sites in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the Sites.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated tagses for given Sites id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Tags instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Tags> findAssociatedTagses(Integer id, Pageable pageable);

}

