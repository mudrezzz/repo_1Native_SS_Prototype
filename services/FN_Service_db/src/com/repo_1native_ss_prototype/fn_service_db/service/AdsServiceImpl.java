/*Copyright (c) 2017-2018 auditorius.ru All Rights Reserved.
 This software is the confidential and proprietary information of auditorius.ru You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with auditorius.ru*/
package com.repo_1native_ss_prototype.fn_service_db.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.repo_1native_ss_prototype.fn_service_db.Ads;
import com.repo_1native_ss_prototype.fn_service_db.StatsDays;


/**
 * ServiceImpl object for domain model class Ads.
 *
 * @see Ads
 */
@Service("FN_Service_db.AdsService")
public class AdsServiceImpl implements AdsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(AdsServiceImpl.class);

    @Autowired
	@Qualifier("FN_Service_db.StatsDaysService")
	private StatsDaysService statsDaysService;

    @Autowired
    @Qualifier("FN_Service_db.AdsDao")
    private WMGenericDao<Ads, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Ads, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "FN_Service_dbTransactionManager")
    @Override
	public Ads create(Ads ads) {
        LOGGER.debug("Creating a new Ads with information: {}", ads);
        Ads adsCreated = this.wmGenericDao.create(ads);
        if(adsCreated.getStatsDayses() != null) {
            for(StatsDays statsDayse : adsCreated.getStatsDayses()) {
                statsDayse.setAds(adsCreated);
                LOGGER.debug("Creating a new child StatsDays with information: {}", statsDayse);
                statsDaysService.create(statsDayse);
            }
        }
        return adsCreated;
    }

	@Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
	@Override
	public Ads getById(Integer adsId) throws EntityNotFoundException {
        LOGGER.debug("Finding Ads by id: {}", adsId);
        Ads ads = this.wmGenericDao.findById(adsId);
        if (ads == null){
            LOGGER.debug("No Ads found with id: {}", adsId);
            throw new EntityNotFoundException(String.valueOf(adsId));
        }
        return ads;
    }

    @Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
	@Override
	public Ads findById(Integer adsId) {
        LOGGER.debug("Finding Ads by id: {}", adsId);
        return this.wmGenericDao.findById(adsId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "FN_Service_dbTransactionManager")
	@Override
	public Ads update(Ads ads) throws EntityNotFoundException {
        LOGGER.debug("Updating Ads with information: {}", ads);
        this.wmGenericDao.update(ads);

        Integer adsId = ads.getId();

        return this.wmGenericDao.findById(adsId);
    }

    @Transactional(value = "FN_Service_dbTransactionManager")
	@Override
	public Ads delete(Integer adsId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Ads with id: {}", adsId);
        Ads deleted = this.wmGenericDao.findById(adsId);
        if (deleted == null) {
            LOGGER.debug("No Ads found with id: {}", adsId);
            throw new EntityNotFoundException(String.valueOf(adsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
	@Override
	public Page<Ads> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Ads");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
    @Override
    public Page<Ads> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Ads");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service FN_Service_db for table Ads to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
    @Override
    public Page<StatsDays> findAssociatedStatsDayses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated statsDayses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("ads.id = '" + id + "'");

        return statsDaysService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service StatsDaysService instance
	 */
	protected void setStatsDaysService(StatsDaysService service) {
        this.statsDaysService = service;
    }

}

