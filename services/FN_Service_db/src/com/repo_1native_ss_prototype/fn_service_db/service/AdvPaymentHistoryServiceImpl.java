/*Copyright (c) 2017-2018 auditorius.ru All Rights Reserved.
 This software is the confidential and proprietary information of auditorius.ru You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with auditorius.ru*/
package com.repo_1native_ss_prototype.fn_service_db.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.repo_1native_ss_prototype.fn_service_db.AdvPaymentHistory;


/**
 * ServiceImpl object for domain model class AdvPaymentHistory.
 *
 * @see AdvPaymentHistory
 */
@Service("FN_Service_db.AdvPaymentHistoryService")
public class AdvPaymentHistoryServiceImpl implements AdvPaymentHistoryService {

    private static final Logger LOGGER = LoggerFactory.getLogger(AdvPaymentHistoryServiceImpl.class);


    @Autowired
    @Qualifier("FN_Service_db.AdvPaymentHistoryDao")
    private WMGenericDao<AdvPaymentHistory, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<AdvPaymentHistory, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "FN_Service_dbTransactionManager")
    @Override
	public AdvPaymentHistory create(AdvPaymentHistory advPaymentHistory) {
        LOGGER.debug("Creating a new AdvPaymentHistory with information: {}", advPaymentHistory);
        AdvPaymentHistory advPaymentHistoryCreated = this.wmGenericDao.create(advPaymentHistory);
        return advPaymentHistoryCreated;
    }

	@Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
	@Override
	public AdvPaymentHistory getById(Integer advpaymenthistoryId) throws EntityNotFoundException {
        LOGGER.debug("Finding AdvPaymentHistory by id: {}", advpaymenthistoryId);
        AdvPaymentHistory advPaymentHistory = this.wmGenericDao.findById(advpaymenthistoryId);
        if (advPaymentHistory == null){
            LOGGER.debug("No AdvPaymentHistory found with id: {}", advpaymenthistoryId);
            throw new EntityNotFoundException(String.valueOf(advpaymenthistoryId));
        }
        return advPaymentHistory;
    }

    @Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
	@Override
	public AdvPaymentHistory findById(Integer advpaymenthistoryId) {
        LOGGER.debug("Finding AdvPaymentHistory by id: {}", advpaymenthistoryId);
        return this.wmGenericDao.findById(advpaymenthistoryId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "FN_Service_dbTransactionManager")
	@Override
	public AdvPaymentHistory update(AdvPaymentHistory advPaymentHistory) throws EntityNotFoundException {
        LOGGER.debug("Updating AdvPaymentHistory with information: {}", advPaymentHistory);
        this.wmGenericDao.update(advPaymentHistory);

        Integer advpaymenthistoryId = advPaymentHistory.getId();

        return this.wmGenericDao.findById(advpaymenthistoryId);
    }

    @Transactional(value = "FN_Service_dbTransactionManager")
	@Override
	public AdvPaymentHistory delete(Integer advpaymenthistoryId) throws EntityNotFoundException {
        LOGGER.debug("Deleting AdvPaymentHistory with id: {}", advpaymenthistoryId);
        AdvPaymentHistory deleted = this.wmGenericDao.findById(advpaymenthistoryId);
        if (deleted == null) {
            LOGGER.debug("No AdvPaymentHistory found with id: {}", advpaymenthistoryId);
            throw new EntityNotFoundException(String.valueOf(advpaymenthistoryId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
	@Override
	public Page<AdvPaymentHistory> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all AdvPaymentHistories");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
    @Override
    public Page<AdvPaymentHistory> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all AdvPaymentHistories");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service FN_Service_db for table AdvPaymentHistory to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

