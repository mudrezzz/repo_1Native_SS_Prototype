/*Copyright (c) 2017-2018 auditorius.ru All Rights Reserved.
 This software is the confidential and proprietary information of auditorius.ru You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with auditorius.ru*/
package com.repo_1native_ss_prototype.fn_service_db.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.repo_1native_ss_prototype.fn_service_db.DeviceDictionary;
import com.repo_1native_ss_prototype.fn_service_db.StatsDays;

/**
 * Service object for domain model class {@link DeviceDictionary}.
 */
public interface DeviceDictionaryService {

    /**
     * Creates a new DeviceDictionary. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on DeviceDictionary if any.
     *
     * @param deviceDictionary Details of the DeviceDictionary to be created; value cannot be null.
     * @return The newly created DeviceDictionary.
     */
	DeviceDictionary create(DeviceDictionary deviceDictionary);


	/**
	 * Returns DeviceDictionary by given id if exists.
	 *
	 * @param devicedictionaryId The id of the DeviceDictionary to get; value cannot be null.
	 * @return DeviceDictionary associated with the given devicedictionaryId.
     * @throws EntityNotFoundException If no DeviceDictionary is found.
	 */
	DeviceDictionary getById(Integer devicedictionaryId) throws EntityNotFoundException;

    /**
	 * Find and return the DeviceDictionary by given id if exists, returns null otherwise.
	 *
	 * @param devicedictionaryId The id of the DeviceDictionary to get; value cannot be null.
	 * @return DeviceDictionary associated with the given devicedictionaryId.
	 */
	DeviceDictionary findById(Integer devicedictionaryId);


	/**
	 * Updates the details of an existing DeviceDictionary. It replaces all fields of the existing DeviceDictionary with the given deviceDictionary.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on DeviceDictionary if any.
     *
	 * @param deviceDictionary The details of the DeviceDictionary to be updated; value cannot be null.
	 * @return The updated DeviceDictionary.
	 * @throws EntityNotFoundException if no DeviceDictionary is found with given input.
	 */
	DeviceDictionary update(DeviceDictionary deviceDictionary) throws EntityNotFoundException;

    /**
	 * Deletes an existing DeviceDictionary with the given id.
	 *
	 * @param devicedictionaryId The id of the DeviceDictionary to be deleted; value cannot be null.
	 * @return The deleted DeviceDictionary.
	 * @throws EntityNotFoundException if no DeviceDictionary found with the given id.
	 */
	DeviceDictionary delete(Integer devicedictionaryId) throws EntityNotFoundException;

	/**
	 * Find all DeviceDictionaries matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching DeviceDictionaries.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<DeviceDictionary> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all DeviceDictionaries matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching DeviceDictionaries.
     *
     * @see Pageable
     * @see Page
	 */
    Page<DeviceDictionary> findAll(String query, Pageable pageable);

    /**
	 * Exports all DeviceDictionaries matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the DeviceDictionaries in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the DeviceDictionary.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated statsDayses for given DeviceDictionary id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated StatsDays instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<StatsDays> findAssociatedStatsDayses(Integer id, Pageable pageable);

}

