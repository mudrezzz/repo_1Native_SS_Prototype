/*Copyright (c) 2017-2018 auditorius.ru All Rights Reserved.
 This software is the confidential and proprietary information of auditorius.ru You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with auditorius.ru*/
package com.repo_1native_ss_prototype.fn_service_db.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.repo_1native_ss_prototype.fn_service_db.PubPaymentHistory;


/**
 * ServiceImpl object for domain model class PubPaymentHistory.
 *
 * @see PubPaymentHistory
 */
@Service("FN_Service_db.PubPaymentHistoryService")
public class PubPaymentHistoryServiceImpl implements PubPaymentHistoryService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PubPaymentHistoryServiceImpl.class);


    @Autowired
    @Qualifier("FN_Service_db.PubPaymentHistoryDao")
    private WMGenericDao<PubPaymentHistory, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<PubPaymentHistory, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "FN_Service_dbTransactionManager")
    @Override
	public PubPaymentHistory create(PubPaymentHistory pubPaymentHistory) {
        LOGGER.debug("Creating a new PubPaymentHistory with information: {}", pubPaymentHistory);
        PubPaymentHistory pubPaymentHistoryCreated = this.wmGenericDao.create(pubPaymentHistory);
        return pubPaymentHistoryCreated;
    }

	@Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
	@Override
	public PubPaymentHistory getById(Integer pubpaymenthistoryId) throws EntityNotFoundException {
        LOGGER.debug("Finding PubPaymentHistory by id: {}", pubpaymenthistoryId);
        PubPaymentHistory pubPaymentHistory = this.wmGenericDao.findById(pubpaymenthistoryId);
        if (pubPaymentHistory == null){
            LOGGER.debug("No PubPaymentHistory found with id: {}", pubpaymenthistoryId);
            throw new EntityNotFoundException(String.valueOf(pubpaymenthistoryId));
        }
        return pubPaymentHistory;
    }

    @Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
	@Override
	public PubPaymentHistory findById(Integer pubpaymenthistoryId) {
        LOGGER.debug("Finding PubPaymentHistory by id: {}", pubpaymenthistoryId);
        return this.wmGenericDao.findById(pubpaymenthistoryId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "FN_Service_dbTransactionManager")
	@Override
	public PubPaymentHistory update(PubPaymentHistory pubPaymentHistory) throws EntityNotFoundException {
        LOGGER.debug("Updating PubPaymentHistory with information: {}", pubPaymentHistory);
        this.wmGenericDao.update(pubPaymentHistory);

        Integer pubpaymenthistoryId = pubPaymentHistory.getId();

        return this.wmGenericDao.findById(pubpaymenthistoryId);
    }

    @Transactional(value = "FN_Service_dbTransactionManager")
	@Override
	public PubPaymentHistory delete(Integer pubpaymenthistoryId) throws EntityNotFoundException {
        LOGGER.debug("Deleting PubPaymentHistory with id: {}", pubpaymenthistoryId);
        PubPaymentHistory deleted = this.wmGenericDao.findById(pubpaymenthistoryId);
        if (deleted == null) {
            LOGGER.debug("No PubPaymentHistory found with id: {}", pubpaymenthistoryId);
            throw new EntityNotFoundException(String.valueOf(pubpaymenthistoryId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
	@Override
	public Page<PubPaymentHistory> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all PubPaymentHistories");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
    @Override
    public Page<PubPaymentHistory> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all PubPaymentHistories");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service FN_Service_db for table PubPaymentHistory to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

