/*Copyright (c) 2017-2018 auditorius.ru All Rights Reserved.
 This software is the confidential and proprietary information of auditorius.ru You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with auditorius.ru*/
package com.repo_1native_ss_prototype.fn_service_db.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.repo_1native_ss_prototype.fn_service_db.Ads;
import com.repo_1native_ss_prototype.fn_service_db.StatsDays;

/**
 * Service object for domain model class {@link Ads}.
 */
public interface AdsService {

    /**
     * Creates a new Ads. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Ads if any.
     *
     * @param ads Details of the Ads to be created; value cannot be null.
     * @return The newly created Ads.
     */
	Ads create(Ads ads);


	/**
	 * Returns Ads by given id if exists.
	 *
	 * @param adsId The id of the Ads to get; value cannot be null.
	 * @return Ads associated with the given adsId.
     * @throws EntityNotFoundException If no Ads is found.
	 */
	Ads getById(Integer adsId) throws EntityNotFoundException;

    /**
	 * Find and return the Ads by given id if exists, returns null otherwise.
	 *
	 * @param adsId The id of the Ads to get; value cannot be null.
	 * @return Ads associated with the given adsId.
	 */
	Ads findById(Integer adsId);


	/**
	 * Updates the details of an existing Ads. It replaces all fields of the existing Ads with the given ads.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on Ads if any.
     *
	 * @param ads The details of the Ads to be updated; value cannot be null.
	 * @return The updated Ads.
	 * @throws EntityNotFoundException if no Ads is found with given input.
	 */
	Ads update(Ads ads) throws EntityNotFoundException;

    /**
	 * Deletes an existing Ads with the given id.
	 *
	 * @param adsId The id of the Ads to be deleted; value cannot be null.
	 * @return The deleted Ads.
	 * @throws EntityNotFoundException if no Ads found with the given id.
	 */
	Ads delete(Integer adsId) throws EntityNotFoundException;

	/**
	 * Find all Ads matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Ads.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<Ads> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all Ads matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Ads.
     *
     * @see Pageable
     * @see Page
	 */
    Page<Ads> findAll(String query, Pageable pageable);

    /**
	 * Exports all Ads matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Ads in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the Ads.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated statsDayses for given Ads id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated StatsDays instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<StatsDays> findAssociatedStatsDayses(Integer id, Pageable pageable);

}

