/*Copyright (c) 2017-2018 auditorius.ru All Rights Reserved.
 This software is the confidential and proprietary information of auditorius.ru You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with auditorius.ru*/
package com.repo_1native_ss_prototype.fn_service_db.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.repo_1native_ss_prototype.fn_service_db.Sites;
import com.repo_1native_ss_prototype.fn_service_db.Tags;


/**
 * ServiceImpl object for domain model class Sites.
 *
 * @see Sites
 */
@Service("FN_Service_db.SitesService")
public class SitesServiceImpl implements SitesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(SitesServiceImpl.class);

    @Autowired
	@Qualifier("FN_Service_db.TagsService")
	private TagsService tagsService;

    @Autowired
    @Qualifier("FN_Service_db.SitesDao")
    private WMGenericDao<Sites, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Sites, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "FN_Service_dbTransactionManager")
    @Override
	public Sites create(Sites sites) {
        LOGGER.debug("Creating a new Sites with information: {}", sites);
        Sites sitesCreated = this.wmGenericDao.create(sites);
        if(sitesCreated.getTagses() != null) {
            for(Tags tagse : sitesCreated.getTagses()) {
                tagse.setSites(sitesCreated);
                LOGGER.debug("Creating a new child Tags with information: {}", tagse);
                tagsService.create(tagse);
            }
        }
        return sitesCreated;
    }

	@Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
	@Override
	public Sites getById(Integer sitesId) throws EntityNotFoundException {
        LOGGER.debug("Finding Sites by id: {}", sitesId);
        Sites sites = this.wmGenericDao.findById(sitesId);
        if (sites == null){
            LOGGER.debug("No Sites found with id: {}", sitesId);
            throw new EntityNotFoundException(String.valueOf(sitesId));
        }
        return sites;
    }

    @Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
	@Override
	public Sites findById(Integer sitesId) {
        LOGGER.debug("Finding Sites by id: {}", sitesId);
        return this.wmGenericDao.findById(sitesId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "FN_Service_dbTransactionManager")
	@Override
	public Sites update(Sites sites) throws EntityNotFoundException {
        LOGGER.debug("Updating Sites with information: {}", sites);
        this.wmGenericDao.update(sites);

        Integer sitesId = sites.getId();

        return this.wmGenericDao.findById(sitesId);
    }

    @Transactional(value = "FN_Service_dbTransactionManager")
	@Override
	public Sites delete(Integer sitesId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Sites with id: {}", sitesId);
        Sites deleted = this.wmGenericDao.findById(sitesId);
        if (deleted == null) {
            LOGGER.debug("No Sites found with id: {}", sitesId);
            throw new EntityNotFoundException(String.valueOf(sitesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
	@Override
	public Page<Sites> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Sites");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
    @Override
    public Page<Sites> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Sites");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service FN_Service_db for table Sites to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
    @Override
    public Page<Tags> findAssociatedTagses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated tagses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("sites.id = '" + id + "'");

        return tagsService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TagsService instance
	 */
	protected void setTagsService(TagsService service) {
        this.tagsService = service;
    }

}

