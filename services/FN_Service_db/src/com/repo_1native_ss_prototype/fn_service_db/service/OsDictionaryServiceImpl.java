/*Copyright (c) 2017-2018 auditorius.ru All Rights Reserved.
 This software is the confidential and proprietary information of auditorius.ru You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with auditorius.ru*/
package com.repo_1native_ss_prototype.fn_service_db.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.repo_1native_ss_prototype.fn_service_db.OsDictionary;
import com.repo_1native_ss_prototype.fn_service_db.StatsDays;


/**
 * ServiceImpl object for domain model class OsDictionary.
 *
 * @see OsDictionary
 */
@Service("FN_Service_db.OsDictionaryService")
public class OsDictionaryServiceImpl implements OsDictionaryService {

    private static final Logger LOGGER = LoggerFactory.getLogger(OsDictionaryServiceImpl.class);

    @Autowired
	@Qualifier("FN_Service_db.StatsDaysService")
	private StatsDaysService statsDaysService;

    @Autowired
    @Qualifier("FN_Service_db.OsDictionaryDao")
    private WMGenericDao<OsDictionary, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<OsDictionary, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "FN_Service_dbTransactionManager")
    @Override
	public OsDictionary create(OsDictionary osDictionary) {
        LOGGER.debug("Creating a new OsDictionary with information: {}", osDictionary);
        OsDictionary osDictionaryCreated = this.wmGenericDao.create(osDictionary);
        if(osDictionaryCreated.getStatsDayses() != null) {
            for(StatsDays statsDayse : osDictionaryCreated.getStatsDayses()) {
                statsDayse.setOsDictionary(osDictionaryCreated);
                LOGGER.debug("Creating a new child StatsDays with information: {}", statsDayse);
                statsDaysService.create(statsDayse);
            }
        }
        return osDictionaryCreated;
    }

	@Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
	@Override
	public OsDictionary getById(Integer osdictionaryId) throws EntityNotFoundException {
        LOGGER.debug("Finding OsDictionary by id: {}", osdictionaryId);
        OsDictionary osDictionary = this.wmGenericDao.findById(osdictionaryId);
        if (osDictionary == null){
            LOGGER.debug("No OsDictionary found with id: {}", osdictionaryId);
            throw new EntityNotFoundException(String.valueOf(osdictionaryId));
        }
        return osDictionary;
    }

    @Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
	@Override
	public OsDictionary findById(Integer osdictionaryId) {
        LOGGER.debug("Finding OsDictionary by id: {}", osdictionaryId);
        return this.wmGenericDao.findById(osdictionaryId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "FN_Service_dbTransactionManager")
	@Override
	public OsDictionary update(OsDictionary osDictionary) throws EntityNotFoundException {
        LOGGER.debug("Updating OsDictionary with information: {}", osDictionary);
        this.wmGenericDao.update(osDictionary);

        Integer osdictionaryId = osDictionary.getId();

        return this.wmGenericDao.findById(osdictionaryId);
    }

    @Transactional(value = "FN_Service_dbTransactionManager")
	@Override
	public OsDictionary delete(Integer osdictionaryId) throws EntityNotFoundException {
        LOGGER.debug("Deleting OsDictionary with id: {}", osdictionaryId);
        OsDictionary deleted = this.wmGenericDao.findById(osdictionaryId);
        if (deleted == null) {
            LOGGER.debug("No OsDictionary found with id: {}", osdictionaryId);
            throw new EntityNotFoundException(String.valueOf(osdictionaryId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
	@Override
	public Page<OsDictionary> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all OsDictionaries");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
    @Override
    public Page<OsDictionary> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all OsDictionaries");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service FN_Service_db for table OsDictionary to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
    @Override
    public Page<StatsDays> findAssociatedStatsDayses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated statsDayses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("osDictionary.id = '" + id + "'");

        return statsDaysService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service StatsDaysService instance
	 */
	protected void setStatsDaysService(StatsDaysService service) {
        this.statsDaysService = service;
    }

}

