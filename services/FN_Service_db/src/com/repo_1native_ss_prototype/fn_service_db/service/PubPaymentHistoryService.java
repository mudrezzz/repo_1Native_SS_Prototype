/*Copyright (c) 2017-2018 auditorius.ru All Rights Reserved.
 This software is the confidential and proprietary information of auditorius.ru You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with auditorius.ru*/
package com.repo_1native_ss_prototype.fn_service_db.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.repo_1native_ss_prototype.fn_service_db.PubPaymentHistory;

/**
 * Service object for domain model class {@link PubPaymentHistory}.
 */
public interface PubPaymentHistoryService {

    /**
     * Creates a new PubPaymentHistory. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on PubPaymentHistory if any.
     *
     * @param pubPaymentHistory Details of the PubPaymentHistory to be created; value cannot be null.
     * @return The newly created PubPaymentHistory.
     */
	PubPaymentHistory create(PubPaymentHistory pubPaymentHistory);


	/**
	 * Returns PubPaymentHistory by given id if exists.
	 *
	 * @param pubpaymenthistoryId The id of the PubPaymentHistory to get; value cannot be null.
	 * @return PubPaymentHistory associated with the given pubpaymenthistoryId.
     * @throws EntityNotFoundException If no PubPaymentHistory is found.
	 */
	PubPaymentHistory getById(Integer pubpaymenthistoryId) throws EntityNotFoundException;

    /**
	 * Find and return the PubPaymentHistory by given id if exists, returns null otherwise.
	 *
	 * @param pubpaymenthistoryId The id of the PubPaymentHistory to get; value cannot be null.
	 * @return PubPaymentHistory associated with the given pubpaymenthistoryId.
	 */
	PubPaymentHistory findById(Integer pubpaymenthistoryId);


	/**
	 * Updates the details of an existing PubPaymentHistory. It replaces all fields of the existing PubPaymentHistory with the given pubPaymentHistory.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on PubPaymentHistory if any.
     *
	 * @param pubPaymentHistory The details of the PubPaymentHistory to be updated; value cannot be null.
	 * @return The updated PubPaymentHistory.
	 * @throws EntityNotFoundException if no PubPaymentHistory is found with given input.
	 */
	PubPaymentHistory update(PubPaymentHistory pubPaymentHistory) throws EntityNotFoundException;

    /**
	 * Deletes an existing PubPaymentHistory with the given id.
	 *
	 * @param pubpaymenthistoryId The id of the PubPaymentHistory to be deleted; value cannot be null.
	 * @return The deleted PubPaymentHistory.
	 * @throws EntityNotFoundException if no PubPaymentHistory found with the given id.
	 */
	PubPaymentHistory delete(Integer pubpaymenthistoryId) throws EntityNotFoundException;

	/**
	 * Find all PubPaymentHistories matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching PubPaymentHistories.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<PubPaymentHistory> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all PubPaymentHistories matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching PubPaymentHistories.
     *
     * @see Pageable
     * @see Page
	 */
    Page<PubPaymentHistory> findAll(String query, Pageable pageable);

    /**
	 * Exports all PubPaymentHistories matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the PubPaymentHistories in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the PubPaymentHistory.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

