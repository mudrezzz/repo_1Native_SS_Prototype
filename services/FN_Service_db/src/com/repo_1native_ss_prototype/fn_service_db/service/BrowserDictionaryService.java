/*Copyright (c) 2017-2018 auditorius.ru All Rights Reserved.
 This software is the confidential and proprietary information of auditorius.ru You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with auditorius.ru*/
package com.repo_1native_ss_prototype.fn_service_db.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.repo_1native_ss_prototype.fn_service_db.BrowserDictionary;
import com.repo_1native_ss_prototype.fn_service_db.StatsDays;

/**
 * Service object for domain model class {@link BrowserDictionary}.
 */
public interface BrowserDictionaryService {

    /**
     * Creates a new BrowserDictionary. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on BrowserDictionary if any.
     *
     * @param browserDictionary Details of the BrowserDictionary to be created; value cannot be null.
     * @return The newly created BrowserDictionary.
     */
	BrowserDictionary create(BrowserDictionary browserDictionary);


	/**
	 * Returns BrowserDictionary by given id if exists.
	 *
	 * @param browserdictionaryId The id of the BrowserDictionary to get; value cannot be null.
	 * @return BrowserDictionary associated with the given browserdictionaryId.
     * @throws EntityNotFoundException If no BrowserDictionary is found.
	 */
	BrowserDictionary getById(Integer browserdictionaryId) throws EntityNotFoundException;

    /**
	 * Find and return the BrowserDictionary by given id if exists, returns null otherwise.
	 *
	 * @param browserdictionaryId The id of the BrowserDictionary to get; value cannot be null.
	 * @return BrowserDictionary associated with the given browserdictionaryId.
	 */
	BrowserDictionary findById(Integer browserdictionaryId);


	/**
	 * Updates the details of an existing BrowserDictionary. It replaces all fields of the existing BrowserDictionary with the given browserDictionary.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on BrowserDictionary if any.
     *
	 * @param browserDictionary The details of the BrowserDictionary to be updated; value cannot be null.
	 * @return The updated BrowserDictionary.
	 * @throws EntityNotFoundException if no BrowserDictionary is found with given input.
	 */
	BrowserDictionary update(BrowserDictionary browserDictionary) throws EntityNotFoundException;

    /**
	 * Deletes an existing BrowserDictionary with the given id.
	 *
	 * @param browserdictionaryId The id of the BrowserDictionary to be deleted; value cannot be null.
	 * @return The deleted BrowserDictionary.
	 * @throws EntityNotFoundException if no BrowserDictionary found with the given id.
	 */
	BrowserDictionary delete(Integer browserdictionaryId) throws EntityNotFoundException;

	/**
	 * Find all BrowserDictionaries matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching BrowserDictionaries.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<BrowserDictionary> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all BrowserDictionaries matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching BrowserDictionaries.
     *
     * @see Pageable
     * @see Page
	 */
    Page<BrowserDictionary> findAll(String query, Pageable pageable);

    /**
	 * Exports all BrowserDictionaries matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the BrowserDictionaries in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the BrowserDictionary.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated statsDayses for given BrowserDictionary id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated StatsDays instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<StatsDays> findAssociatedStatsDayses(Integer id, Pageable pageable);

}

