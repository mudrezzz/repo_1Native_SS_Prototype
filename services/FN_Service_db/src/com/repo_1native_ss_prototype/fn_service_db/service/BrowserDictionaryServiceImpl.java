/*Copyright (c) 2017-2018 auditorius.ru All Rights Reserved.
 This software is the confidential and proprietary information of auditorius.ru You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with auditorius.ru*/
package com.repo_1native_ss_prototype.fn_service_db.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.repo_1native_ss_prototype.fn_service_db.BrowserDictionary;
import com.repo_1native_ss_prototype.fn_service_db.StatsDays;


/**
 * ServiceImpl object for domain model class BrowserDictionary.
 *
 * @see BrowserDictionary
 */
@Service("FN_Service_db.BrowserDictionaryService")
public class BrowserDictionaryServiceImpl implements BrowserDictionaryService {

    private static final Logger LOGGER = LoggerFactory.getLogger(BrowserDictionaryServiceImpl.class);

    @Autowired
	@Qualifier("FN_Service_db.StatsDaysService")
	private StatsDaysService statsDaysService;

    @Autowired
    @Qualifier("FN_Service_db.BrowserDictionaryDao")
    private WMGenericDao<BrowserDictionary, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<BrowserDictionary, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "FN_Service_dbTransactionManager")
    @Override
	public BrowserDictionary create(BrowserDictionary browserDictionary) {
        LOGGER.debug("Creating a new BrowserDictionary with information: {}", browserDictionary);
        BrowserDictionary browserDictionaryCreated = this.wmGenericDao.create(browserDictionary);
        if(browserDictionaryCreated.getStatsDayses() != null) {
            for(StatsDays statsDayse : browserDictionaryCreated.getStatsDayses()) {
                statsDayse.setBrowserDictionary(browserDictionaryCreated);
                LOGGER.debug("Creating a new child StatsDays with information: {}", statsDayse);
                statsDaysService.create(statsDayse);
            }
        }
        return browserDictionaryCreated;
    }

	@Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
	@Override
	public BrowserDictionary getById(Integer browserdictionaryId) throws EntityNotFoundException {
        LOGGER.debug("Finding BrowserDictionary by id: {}", browserdictionaryId);
        BrowserDictionary browserDictionary = this.wmGenericDao.findById(browserdictionaryId);
        if (browserDictionary == null){
            LOGGER.debug("No BrowserDictionary found with id: {}", browserdictionaryId);
            throw new EntityNotFoundException(String.valueOf(browserdictionaryId));
        }
        return browserDictionary;
    }

    @Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
	@Override
	public BrowserDictionary findById(Integer browserdictionaryId) {
        LOGGER.debug("Finding BrowserDictionary by id: {}", browserdictionaryId);
        return this.wmGenericDao.findById(browserdictionaryId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "FN_Service_dbTransactionManager")
	@Override
	public BrowserDictionary update(BrowserDictionary browserDictionary) throws EntityNotFoundException {
        LOGGER.debug("Updating BrowserDictionary with information: {}", browserDictionary);
        this.wmGenericDao.update(browserDictionary);

        Integer browserdictionaryId = browserDictionary.getId();

        return this.wmGenericDao.findById(browserdictionaryId);
    }

    @Transactional(value = "FN_Service_dbTransactionManager")
	@Override
	public BrowserDictionary delete(Integer browserdictionaryId) throws EntityNotFoundException {
        LOGGER.debug("Deleting BrowserDictionary with id: {}", browserdictionaryId);
        BrowserDictionary deleted = this.wmGenericDao.findById(browserdictionaryId);
        if (deleted == null) {
            LOGGER.debug("No BrowserDictionary found with id: {}", browserdictionaryId);
            throw new EntityNotFoundException(String.valueOf(browserdictionaryId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
	@Override
	public Page<BrowserDictionary> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all BrowserDictionaries");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
    @Override
    public Page<BrowserDictionary> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all BrowserDictionaries");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service FN_Service_db for table BrowserDictionary to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "FN_Service_dbTransactionManager")
    @Override
    public Page<StatsDays> findAssociatedStatsDayses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated statsDayses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("browserDictionary.id = '" + id + "'");

        return statsDaysService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service StatsDaysService instance
	 */
	protected void setStatsDaysService(StatsDaysService service) {
        this.statsDaysService = service;
    }

}

